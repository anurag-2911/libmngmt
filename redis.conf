# Redis configuration optimized for API caching
# Place this file as redis.conf

# Network settings
bind 0.0.0.0
port 6379
protected-mode no
timeout 0
tcp-keepalive 300

# Memory management for caching
maxmemory 200mb
maxmemory-policy allkeys-lru  # Evict least recently used keys when memory full

# Persistence (optional for cache)
# Comment out these lines for pure cache (no persistence)
save 900 1     # Save if at least 1 key changed in 900 seconds
save 300 10    # Save if at least 10 keys changed in 300 seconds  
save 60 10000  # Save if at least 10000 keys changed in 60 seconds

# For pure cache (no persistence), use these instead:
# save ""
# appendonly no

# Performance settings
databases 16
tcp-backlog 511
maxclients 10000

# Logging
loglevel notice
logfile ""

# Security (basic)
# requirepass your_redis_password  # Uncomment and set password for production

# Performance optimizations
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000

# Lazy freeing (background deletion)
lazyfree-lazy-eviction yes
lazyfree-lazy-expire yes
lazyfree-lazy-server-del yes

# Client output buffer limits
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Advanced memory settings
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes

# Recommended cache patterns for the library API:
#
# Key naming convention:
# - book:{id} - Individual book data (TTL: 10 minutes)
# - books:{filter_hash} - Book list with filters (TTL: 5 minutes)  
# - stats:books - Book statistics (TTL: 1 hour)
# - user:{id}:session - User sessions if auth is added (TTL: 24 hours)
#
# Memory usage estimates:
# - 1000 books cached: ~5-10MB
# - 10,000 books cached: ~50-100MB  
# - 100 popular search results: ~10-20MB
#
# Cache hit rate expectations:
# - Book details: 70-80% (popular books accessed frequently)
# - Book searches: 60-70% (common filters repeated)
# - Overall cache hit rate: 65-75%
#
# Performance improvement:
# - Cache hit response time: 1-3ms
# - Cache miss response time: 20-50ms
# - Database load reduction: 65-75%
