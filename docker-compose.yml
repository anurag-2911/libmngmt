services:
  postgres:
    image: postgres:15-alpine
    container_name: libmngmt_postgres
    environment:
      POSTGRES_USER: libuser
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme_insecure_default}
      POSTGRES_DB: libmngmt
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U libuser -d libmngmt"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - libmngmt_network

  redis:
    image: redis:7-alpine
    container_name: libmngmt_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - libmngmt_network

  api:
    build: .
    container_name: libmngmt_api
    ports:
      - "8080:8080"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: libuser
      DB_PASSWORD: ${DB_PASSWORD:-changeme_insecure_default}
      DB_NAME: libmngmt
      DB_SSLMODE: disable
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080
      LOG_LEVEL: info
      REDIS_ENABLED: true
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: 0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - libmngmt_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  libmngmt_network:
    driver: bridge
